library(shinystan)
summary(qq)
qq
qq@summary
runApp()
runApp()
,
div(class = "home-links",
div(id = "model-name",
br(),
h2("Model:"),
h4(shinystan:::.sso_env$.SHINYSTAN_OBJECT@model_name),
br()
), #note this used to be .model_name
br(),
# html used to be called, now directly in module
HTML("
<div id = 'links_nav_div'>
<nav class='cl-effect-9' id='links_nav'>
<a id = 'toc_diagnose' href='#cl-effect-9'>
<span>Diagnose</span>
<span>MCMC diagnostics<span>with special features for NUTS</span>
</span>
</a>
<a id = 'toc_estimate' href='#cl-effect-9'>
<span>Estimate</span>
<span>Multiparameter Plots<span>& Posterior Summary Statistics</span>
</span>
</a>
<a id = 'toc_more' href='#cl-effect-9'>
<span>More</span><span>Model Code, <span>Help & About</span>
</span>
</a>
</nav>
</div>" )
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tt <- rstan::read_stan_csv("output.csv")
tt
ww <- posterior::as_draws(tt)
bayesplot::mcmc_dens(ww)
qq <- shinystan::as.shinystan(tt)
qq@model_code
qq@mo\\
qq@user_model_info
runApp()
runApp()
runApp()
runApp()
?
callModule
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?reactiveValuesToList
runApp()
runApp()
is.null(NULL)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tt <- rstan::read_stan_csv("output.csv")
tt
ww <- posterior::as_draws(tt)
bayesplot::mcmc_dens(ww)
qq <- shinystan::as.shinystan(tt)
qq@user_model_info
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
summary(1:10)
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
summary(1:10)
table(summary(1:10))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
tt <- rstan::read_stan_csv("output.csv")
tt
ww <- posterior::as_draws(tt)
bayesplot::mcmc_dens(ww)
qq <- shinystan::as.shinystan(tt)
qq@misc
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='dveen', token='12102F507CC1A0774B64AA6DD4309412', secret='exfqYuBU0A+G8cVw9IZU8eX9bwzoJDad08zHJeP6')
rsconnect::deployApp(getwd(), "shinyforcmdstan")
rsconnect::deployApp(getwd(), appName = "shinyforcmdstan")
rsconnect::deployApp(getwd(), appName = "shinyforcmdstan")
rsconnect::deployApp(getwd(), appName = "shinyforcmdstan")
shiny::runApp()
shiny::runApp()
rsconnect::deployApp(getwd(), appName = "shinyforcmdstan")
getwd()
rsconnect::deployApp("/Users/dveen5/OneDrive/Werk/Programming/shinyapps/shinyforcmdstanRelease", appName = "shinyforcmdstan")
install.packages("shinystan")
install.packages("shinystan")
install.packages("shinystan")
install.packages("shinystan")
install.packages("shinystan")
shiny::runApp()
rsconnect::deployApp("/Users/dveen5/OneDrive/Werk/Programming/shinyapps/shinyforcmdstanRelease", appName = "shinyforcmdstan")
exists(sso)
?validate
sso <- NULL
runApp()
shinystan::eight_schools
runApp()
sso@stan_method
runApp()
?shinystan::as.shinystan
shinystan::eight_schools
sso <- class("shinystan", list(
model_name = "No name",
param_names = "",
param_dims = list(),
posterior_sample = array(NA, c(1, 1)),
summary = matrix(NA, nr = 1, nc =1),
monitor_summary = data.frame(NA),
sampler_params = list(NA),
n_chain = 0,
n_iter = 0,
n_warmup = 0,
user_model_info = "Use this space to store notes about your model",
model_code = "Use this space to store your model code",
stan_used = FALSE,
stan_method = "unknown",
stan_algorithm = "unknown",
sso_version = as.character(utils::packageVersion("shinystan")),
misc = list(sso_version = utils::packageVersion("shinystan"))
))
class("shinystan", sso)
?class
class(sso) <- "shinystan"
sso
dput(shinystan::eight_schools)
library(shinystan)
shinystan::eight_schools
tt <- shinystan::eight_schools
tt
dput(tt)
tt@monitor_summary <- NULL
shinystan::eight_schools
shinystan::eight_schools
dput(shinystan::eight_schools)
runApp()
shiny::runApp()
sso@misc$stan_method
sso@model_name
shiny::runApp()
shiny::runApp()
sso@model_name
sso@model_name
shiny::runApp()
shiny::runApp()
sso
runApp()
is.null(NA)
is.null()
runApp()
runApp()
rm(sso)
runApp()
runApp()
runApp()
?exists
exists(sso)
get0(sso)
get0("sso")
exists("sso")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rm(sso)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
invisible()
?invisible()
runApp()
runApp()
?capture.output
suppressPackageStartupMessages()
?sink
sink(sso)
capture.output(sso)
capture.output(sso, file = "")
capture.output(sso, file = "nul")
invisible
?invisible
runApp()
rm(sso)
runApp()
?hide
?supress
?upress
??supress
sso@sso_version
sso@stan_method
sso@user_model_info
runApp()
runApp()
runApp()
runApp()
runApp()
?stopApp
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?validate
runApp()
runApp()
runApp()
runApp()
rm(sso)
runApp()
runApp()
runApp()
rm(sso)
runApp()
runApp()
runApp()
?actionButton
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp("/Users/dveen5/OneDrive/Werk/Programming/shinyapps/shinyforcmdstanRelease", appName = "shinyforcmdstan")
rsconnect::deployApp("/Users/dveen5/OneDrive/Werk/Programming/shinyapps/shinyforcmdstanRelease", appName = "shinyforcmdstan")
?install.packages()
devtools::uninstall("shinystan")
remove.packages("shinystan")
install.packages("shinystan")
install.packages("shinystan")
shiny::runApp()
# releases
rsconnect::deployApp('C:/Users/5507553/surfdrive/PhD werk/R working directory/shinyapps/SBC_shinyapp', account = "utrecht-university",
appName = "SBC_plots")
rsconnect::deployApp("/Users/dveen5/OneDrive/Werk/Programming/shinyapps/shinyforcmdstanRelease", appName = "shinyforcmdstan")
rsconnect::deployApp("/Users/dveen5/OneDrive/Werk/Programming/shinyapps/shinyforcmdstanRelease", appName = "shinyforcmdstan")
?cmdstan
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")
# logistic regression with intercept alpha and coefficients beta
fit <- cmdstanr_example("logistic")
library(cmdstanr)
# logistic regression with intercept alpha and coefficients beta
fit <- cmdstanr_example("logistic")
library(cmdstanr)
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")
# logistic regression with intercept alpha and coefficients beta
fit <- cmdstanr_example("logistic")
fit
fit$output_files()
fit$summary()
# returned as 3-D array (see ?posterior::draws_array)
draws <- fit$draws()
dim(draws)
?cmdstanr_example
fit_logistic_mcmc <- cmdstanr_example("logistic", chains = 2)
fit_logistic_mcmc$save_output_files()
?rstan::read_stan_csv
runApp()
rsconnect::deployApp("/Users/dveen5/OneDrive/Werk/Programming/shinyapps/shinyforcmdstanRelease", appName = "shinyforcmdstan")
# Main app UI
ui = fluidPage(
contactPageUI("contact")
)
# Main app server
server = function(input, output, session) {
observe({callModule(contactPage, "contact")})
}
# The module UI
contactPageUI = function(id) {
ns = NS(id)
tagList(
fluidRow(
fileInput(ns("attached_file"), label = "Attach a file to the mail.", multiple = T, placeholder = "No file selected."),
textAreaInput(ns("mail_body"), placeholder = "Text area*", label = "", width = "500px", height = "300px")
),
fluidRow(
actionButton(ns("send_mail"), label = "Send e-mail", icon = icon("envelope", class = "color:#004a59", lib = "font-awesome")),
div("Automatic mails require Outlook, if you don't have Outlook please use to contact mail adresses.", style = "font-size:0.7em;")
)
)
}
# Module server
contactPage = function(input, output, session) {
ns <- session$ns
observeEvent(input$send_mail, {
print("E-mail sent.")
})
}
# Main app UI
ui = fluidPage(
contactPageUI("contact")
)
# Main app server
server = function(input, output, session) {
observe({callModule(contactPage, "contact")})
}
# The module UI
contactPageUI = function(id) {
ns = NS(id)
tagList(
fluidRow(
fileInput(ns("attached_file"), label = "Attach a file to the mail.", multiple = T, placeholder = "No file selected."),
textAreaInput(ns("mail_body"), placeholder = "Text area*", label = "", width = "500px", height = "300px")
),
fluidRow(
actionButton(ns("send_mail"), label = "Send e-mail", icon = icon("envelope", class = "color:#004a59", lib = "font-awesome")),
div("Automatic mails require Outlook, if you don't have Outlook please use to contact mail adresses.", style = "font-size:0.7em;")
)
)
}
# Module server
contactPage = function(input, output, session) {
ns <- session$ns
observeEvent(input$send_mail, {
print("E-mail sent.")
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
rm(soo)
rm(sso)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sso@misc
runApp()
runApp()
runApp()
runApp()
runApp()
sso@param_names
sso@summary
sso@param_names
runApp()
sso@param_names
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
posterior::monitor(sso)
rstan::monitor()
data.frame(rstan::monitor(sso@posterior_sample, print = FALSE, warmup = sso@n_warmup)
)
runApp()
rsconnect::deployApp("/Users/dveen5/OneDrive/Werk/Programming/shinyapps/shinyforcmdstanRelease", appName = "shinyforcmdstan")
runApp()
runApp()
runApp()
sso@misc
runApp()
runApp()
runApp()
sso@misc
runApp()
runApp()
runApp()
generate_report(sso = sso,
n_param = 3,
pars = NULL,
output_format = "html_document",
report_type = "diagnose"
)
rmarkdown::render(input = system.file(paste0(getwd(), "reports/generate_report_diagnostics.Rmd"),
package = "shinystan"),
output_format = output_format,
output_dir = getwd(),
output_file = "ShinyStan_diagnostics_report")
rmarkdown::render(input = system.file(paste0(getwd(), "reports/generate_report_diagnostics.Rmd"),
package = "shinystan"),
output_format = "html_document",
output_dir = getwd(),
output_file = "ShinyStan_diagnostics_report")
rmarkdown::render(input = system.file(paste0(getwd(), "reports/generate_report_diagnostics.Rmd")),
output_format = "html_document",
output_dir = getwd(),
output_file = "ShinyStan_diagnostics_report")
?rmarkdown::render
rmarkdown::render(input = system.file(paste0(getwd(), "reports/generate_report_diagnostics.Rmd")),
output_format = "html_document",
output_dir = getwd(),
output_file = "ShinyStan_diagnostics_report")
rmarkdown::render(input = system.file(paste0(getwd(), "reports/generate_report_diagnostics.Rmd")),
output_format = "html_document",
output_dir = getwd(),
output_file = "ShinyStan_diagnostics_report")
rmarkdown::render(input = system.file(paste0(getwd(), "reports/generate_report_diagnostics.Rmd")),
output_format = "html_document",
output_dir = getwd(),
output_file = "ShinyStan_diagnostics_report")
generate_report(sso = sso,
n_param = 3,
pars = NULL,
output_format = "html_document",
report_type = "diagnose"
)
system.file(paste0(getwd(), "reports/generate_report_diagnostics.Rmd")
)
system.file(paste0(getwd(), "reports/generate_report_diagnostics.Rmd"))
paste0(getwd(), "reports/generate_report_diagnostics.Rmd")
rmarkdown::render(input = paste0(getwd(), "reports/generate_report_diagnostics.Rmd"),
output_format = "html_document",
output_dir = getwd(),
output_file = "ShinyStan_diagnostics_report")
rmarkdown::render(input = paste0(getwd(), "/reports/generate_report_diagnostics.Rmd"),
output_format = "html_document",
output_dir = getwd(),
output_file = "ShinyStan_diagnostics_report")
runApp()
runApp()
