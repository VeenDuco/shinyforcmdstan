getwd()
usethis::edit_r_profile()
fit$output_files()
library(cmdstanr)
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")
check_cmdstan_toolchain()
cmdstan_path()
set_cmdstan_path("OneDrive/Werk/Programming/cmdstan-2.25.0")
cmdstanr::cmdstan_version()
file <- file.path(cmdstan_path(), "examples", "bernoulli", "bernoulli.stan")
mod <- cmdstan_model(file)
mod$print()
mod$exe_file()
# names correspond to the data block in the Stan program
data_list <- list(N = 10, y = c(0,1,0,0,0,0,0,0,0,1))
fit <- mod$sample(
data = data_list,
seed = 123,
chains = 4,
parallel_chains = 2,
refresh = 500
)
fit$summary()
# use a formula to summarize arbitrary functions, e.g. Pr(theta <= 0.5)
fit$summary("theta", pr_lt_half = ~ mean(. <= 0.235))
draws_array <- fit$draws()
str(draws_array)
draws_df <- as_draws_df(draws_array) # as_draws_matrix() for matrix
print(draws_df)
mcmc_hist(fit$draws("theta"))
# this is a draws_array object from the posterior package
str(fit$sampler_diagnostics())
tt <- fit$sampler_diagnostics()
data.frame(tt[1:10, 1, ])
diagnostics_df <- as_draws_df(fit$sampler_diagnostics())
print(diagnostics_df)
fit$cmdstan_diagnose()
fit$cmdstan_summary()
stanfit <- rstan::read_stan_csv(fit$output_files())
stanfit
fit_mle <- mod$optimize(data = data_list, seed = 123)
stanfit_mle <- rstan::read_stan_csv(fit_mle$output_files())
fit$output_files()
shiny::runApp('shinyforcmdstan')
?shiny::fileInput
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
stanfit
summary(stanfit)
print(stanfit)
stanfit$theta
summary(stanfit)
summary(stanfit())
summary(stanfit)
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
stanfit$theta
stanfit@sim
summary(stanfit@sim)
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
library(cmdstanr)
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")
check_cmdstan_toolchain()
cmdstan_path()
set_cmdstan_path("OneDrive/Werk/Programming/cmdstan-2.25.0")
cmdstanr::cmdstan_version()
file <- file.path(cmdstan_path(), "examples", "bernoulli", "bernoulli.stan")
mod <- cmdstan_model(file)
mod$print()
mod$exe_file()
# names correspond to the data block in the Stan program
data_list <- list(N = 10, y = c(0,1,0,0,0,0,0,0,0,1))
fit <- mod$sample(
data = data_list,
seed = 123,
chains = 4,
parallel_chains = 2,
refresh = 500
)
fit$summary()
# use a formula to summarize arbitrary functions, e.g. Pr(theta <= 0.5)
fit$summary("theta", pr_lt_half = ~ mean(. <= 0.235))
draws_array <- fit$draws()
str(draws_array)
draws_df <- as_draws_df(draws_array) # as_draws_matrix() for matrix
print(draws_df)
mcmc_hist(fit$draws("theta"))
# this is a draws_array object from the posterior package
str(fit$sampler_diagnostics())
tt <- fit$sampler_diagnostics()
data.frame(tt[1:10, 1, ])
diagnostics_df <- as_draws_df(fit$sampler_diagnostics())
print(diagnostics_df)
fit$cmdstan_diagnose()
fit$cmdstan_summary()
stanfit <- rstan::read_stan_csv(fit$output_files())
stanfit
stabfit
stanfit
stanfit@sim
stanfit
print(stanfit)
stanfit()
summary(stanfit)
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
stanfit@model_name
runApp('shinyforcmdstan')
tt <- rstan::read_stan_csv("output.csv")
tt
tt
tt@model_name
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
stanfit
posterior::as_draws_df(stanfit)
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
stanfit
stanfit@model_name
stanfit@model_pars
stanfit@sim
plot(stanfit)
plot(stanfit@sim)
library(rstan)
plot(stanfit)
rm(stanfit)
?rstan::read_stan_csv
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
plot.stan
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
rm(stanfit)
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
shiny::runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
rm(stanfit)
runApp('shinyforcmdstan')
runApp('shinyforcmdstan')
tt <- rstan::read_stan_csv("output.csv")
tt
ww <- posterior::as_draws(tt)
bayesplot::mcmc_areas(ww)
bayesplot::mcmc_dens(ww)
runApp('shinyforcmdstan')
shinystan::as.shinystan(tt)
qq <- shinystan::as.shinystan(tt)
summary(qq)
library(shinystan)
summary(qq)
qq
qq@summary
runApp()
runApp()
,
div(class = "home-links",
div(id = "model-name",
br(),
h2("Model:"),
h4(shinystan:::.sso_env$.SHINYSTAN_OBJECT@model_name),
br()
), #note this used to be .model_name
br(),
# html used to be called, now directly in module
HTML("
<div id = 'links_nav_div'>
<nav class='cl-effect-9' id='links_nav'>
<a id = 'toc_diagnose' href='#cl-effect-9'>
<span>Diagnose</span>
<span>MCMC diagnostics<span>with special features for NUTS</span>
</span>
</a>
<a id = 'toc_estimate' href='#cl-effect-9'>
<span>Estimate</span>
<span>Multiparameter Plots<span>& Posterior Summary Statistics</span>
</span>
</a>
<a id = 'toc_more' href='#cl-effect-9'>
<span>More</span><span>Model Code, <span>Help & About</span>
</span>
</a>
</nav>
</div>" )
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tt <- rstan::read_stan_csv("output.csv")
tt
ww <- posterior::as_draws(tt)
bayesplot::mcmc_dens(ww)
qq <- shinystan::as.shinystan(tt)
qq@model_code
qq@mo\\
qq@user_model_info
runApp()
runApp()
runApp()
runApp()
?
callModule
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?reactiveValuesToList
runApp()
runApp()
is.null(NULL)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tt <- rstan::read_stan_csv("output.csv")
tt
ww <- posterior::as_draws(tt)
bayesplot::mcmc_dens(ww)
qq <- shinystan::as.shinystan(tt)
qq@user_model_info
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
summary(1:10)
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
summary(1:10)
table(summary(1:10))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
tt <- rstan::read_stan_csv("output.csv")
tt
ww <- posterior::as_draws(tt)
bayesplot::mcmc_dens(ww)
qq <- shinystan::as.shinystan(tt)
qq@misc
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='dveen', token='12102F507CC1A0774B64AA6DD4309412', secret='exfqYuBU0A+G8cVw9IZU8eX9bwzoJDad08zHJeP6')
rsconnect::deployApp(getwd(), "shinyforcmdstan")
rsconnect::deployApp(getwd(), appName = "shinyforcmdstan")
rsconnect::deployApp(getwd(), appName = "shinyforcmdstan")
rsconnect::deployApp(getwd(), appName = "shinyforcmdstan")
shiny::runApp()
shiny::runApp()
rsconnect::deployApp(getwd(), appName = "shinyforcmdstan")
getwd()
rsconnect::deployApp("/Users/dveen5/OneDrive/Werk/Programming/shinyapps/shinyforcmdstanRelease", appName = "shinyforcmdstan")
install.packages("shinystan")
install.packages("shinystan")
install.packages("shinystan")
install.packages("shinystan")
install.packages("shinystan")
shiny::runApp()
rsconnect::deployApp("/Users/dveen5/OneDrive/Werk/Programming/shinyapps/shinyforcmdstanRelease", appName = "shinyforcmdstan")
exists(sso)
?validate
sso <- NULL
runApp()
shinystan::eight_schools
runApp()
sso@stan_method
runApp()
?shinystan::as.shinystan
shinystan::eight_schools
sso <- class("shinystan", list(
model_name = "No name",
param_names = "",
param_dims = list(),
posterior_sample = array(NA, c(1, 1)),
summary = matrix(NA, nr = 1, nc =1),
monitor_summary = data.frame(NA),
sampler_params = list(NA),
n_chain = 0,
n_iter = 0,
n_warmup = 0,
user_model_info = "Use this space to store notes about your model",
model_code = "Use this space to store your model code",
stan_used = FALSE,
stan_method = "unknown",
stan_algorithm = "unknown",
sso_version = as.character(utils::packageVersion("shinystan")),
misc = list(sso_version = utils::packageVersion("shinystan"))
))
class("shinystan", sso)
?class
class(sso) <- "shinystan"
sso
dput(shinystan::eight_schools)
library(shinystan)
shinystan::eight_schools
tt <- shinystan::eight_schools
tt
dput(tt)
tt@monitor_summary <- NULL
shinystan::eight_schools
shinystan::eight_schools
dput(shinystan::eight_schools)
runApp()
shiny::runApp()
sso@misc$stan_method
sso@model_name
shiny::runApp()
shiny::runApp()
sso@model_name
sso@model_name
shiny::runApp()
